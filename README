Simple query engine for SQLite 3

Query engine for sqlite 3. Idea inspired by SQLCE quering. Not need to object mapping and classes.
Uses simple quering and dynamic property creation from query resultset schema based on System.Dynamic.

Required:
- .NET 4.0
- Visual Studio 2010 Express (C#) to build from sources
- System.Data.SQLite as exturnal dependency

Using query engine:
To run System.Data.SQLite on .NET 4.0 add to configuration following lines:
<startup useLegacyV2RuntimeActivationPolicy="true">
    <supportedRuntime version="v4.0"/>
 </startup>
 
Inherit from base class passing configuration string name as parameter 
to contructor in base class as follwing:
 
public class DemoDb : SSQE.Database
{
        public DemoDb()
            : base("demo")
        {        
        }
}

So configuration of app should be next:
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <connectionStrings>
    <add name="demo" connectionString="Data Source=:memory:;New=True;Pooling=True;Max Pool Size=1;Journal Mode=Off;Version=3;" />
  </connectionStrings>
  <startup useLegacyV2RuntimeActivationPolicy="true">
    <supportedRuntime version="v4.0"/>
  </startup>
</configuration>

And enjoy with engine:

	    DemoDb db = new DemoDb();

            db.Execute(@"CREATE TABLE dictionary(
                           id INTEGER PRIMARY KEY AUTOINCREMENT,
                           title VARCHAR(256),
                           description TEXT
                        )
                        ;");

            Console.WriteLine("Database created");
            Console.WriteLine();

            int affectedRows = db.Execute("INSERT INTO dictionary(title, description) VALUES(@0, @1)", 
                                                           "Java", 
                                                           @"Java is a programming language originally developed by 
                                                           James Gosling at Sun Microsystems (which is now a subsidiary 
                                                           of Oracle Corporation) and released in 1995 as a core component 
                                                           of Sun Microsystems' Java platform. The language derives much of 
                                                           its syntax from C and C++ but has a simpler object model and fewer 
                                                           low-level facilities.");

            Console.WriteLine("Inserted {0} rows", affectedRows);

            affectedRows = db.Execute("INSERT INTO dictionary(title, description) VALUES(@0, @1)", "Ruby", 
												@"A dynamic, open source programming language with a focus on simplicity and productivity.");

            Console.WriteLine("Inserted {0} rows", affectedRows);

            affectedRows = db.Execute("INSERT INTO dictionary(title, description) VALUES(@0, @1)", "C#", @"C# (pronounced 'see sharp') is a
												multi-paradigm programming language encompassing 
                                                imperative, declarative, functional, generic, object-oriented (class-based), 
                                                and component-oriented programming disciplines. 
                                                It was developed by Microsoft within the .NET initiative and later approved as a standard by 
                                                Ecma (ECMA-334) and ISO (ISO/IEC 23270). ");

            Console.WriteLine("Inserted {0} rows", affectedRows);
            Console.WriteLine();
            Console.WriteLine("Dictionary:");
            Console.WriteLine("Id\tTitle\tDescription");

            var res = db.Query("SELECT * FROM dictionary");
            
            foreach (var r in res)
            {
                Console.WriteLine("{0}\t{1}\t...", r.id, r.title);
            }

            var c = db.Query("SELECT COUNT(*) AS Count FROM dictionary");

            Console.WriteLine("Count of record is {0}", c[0].Count);

            Console.WriteLine();
            Console.WriteLine("Finding Ruby Programming language");
            Console.WriteLine("Id\tTitle\tDescription");

            var ruby = db.Query("SELECT * FROM dictionary WHERE title = @0", "Ruby");
            foreach (var r in ruby)
            {
                Console.WriteLine("{0}\t{1}\t...", r.id, r.title);
            }

            Console.ReadKey();

See SSQE.Demo demo app.

 
 
